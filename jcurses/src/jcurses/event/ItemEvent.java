package jcurses.event;

import jcurses.widgets.Widget;

/**
 * Instances of this class are generated by widgets, that manage a list of
 * items, an example is a list widget.
 */

public class ItemEvent extends Event {

	/**
	 * 
	 */
	public static final int SELECTED = 0;
	/**
	 * 
	 */
	public static final int DESELECTED = 1;
	/**
	 * 
	 */
	public static final int CALLED = 2;
	/**
	 * 
	 */
	private int id = 0;
	/**
	 * 
	 */
	private Object item = null;
	/**
	 * 
	 */
	private int type = 0;

	/**
	 * The constructor.
	 * 
	 * @param source
	 *            the widget, that has generated this event
	 * @param anId
	 *            the id of the affected item
	 * @param anItem
	 *            the content of the affected item, in order this is a string.
	 * @param aType
	 *            the type of the event, must be equal to one of following three
	 *            constants:
	 * 
	 *            <table>
	 *            <tr>
	 *            <code>SELECTED</code> - the event signals, that an item is
	 *            selected by the user
	 *            </tr>
	 *            <tr>
	 *            <code>DESELECTED</code> - the event signals, that an item is
	 *            deselected by the user
	 *            </tr>
	 *            <tr>
	 *            <code>CALLED</code> - the event signals, that an item is
	 *            'called'
	 *            </tr>
	 *            </table>
	 *            by the user, this is in order activated with the cursor an
	 *            pushed 'enter' key.
	 */
	public ItemEvent(final Widget source, final int anId, final Object anItem,
			final int aType) {
		super(source);
		id = anId;
		item = anItem;
		type = aType;
	}

	/**
	 * @return the id (key) of the affected item
	 */
	public final int getId() {
		return id;
	}

	/**
	 * @return the type of the event. Only possible values:
	 *         <code>SELECTED</code>,<code>DESELECTED</code>,<code>CALLED</code>
	 */
	public final int getType() {
		return type;
	}

	/**
	 * @return the content of the affected item
	 */
	public final Object getItem() {
		return item;
	}

}
